using System;

// TODO: Fix comments

namespace opt.Generators
{
    public static class LpTauGenerator
    {
        private const double Ln2 = 0.69314718;

        private static readonly int[,] nr1 = new int[41, 17] {
                        {  0,  0,  0,  0,  0,  0,  0,   0,   0,   0,    0,    0,    0,    0,     0,     0,     0},
                        {  0,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,    1,    1,    1,     1,     1,     1},
                        {  0,  1,  3,  5, 15, 17, 51,  85, 255, 257,  771, 1285, 3855, 4369, 13107, 21845, 65535},
                        {  0,  1,  1,  7, 11, 13, 61,  67,  79, 465,  721,  823, 4091, 4125,  4141, 28723, 45311},
                        {  0,  1,  3,  7,  5,  7, 43,  49, 147, 439, 1013,  727,  987, 5889,  6915, 16647, 49925},
                        {  0,  1,  1,  5,  3, 15, 51, 125, 141, 177,  759,  267, 1839, 6929, 16241, 16565, 17139},
                        {  0,  1,  3,  1,  1,  9, 59,  25,  89, 321,  835,  833, 4033, 3913, 11643, 18777, 35225},
                        {  0,  1,  1,  3,  7, 31, 47, 109, 173, 181,  949,  471, 2515, 6211,  2147,  3169, 35873},
                        {  0,  1,  3,  3,  9,  9, 57,  43,  43, 225,  113, 1601,  579, 1731, 11977,  7241, 63609},
                        {  0,  1,  3,  7, 13,  3, 35,  89,   9, 235,  929, 1341, 3863, 1347,  4417,  5087, 12631},
                        {  0,  1,  1,  5, 11, 27, 53,  69,  25, 103,  615,  913,  977, 6197, 14651,  2507, 27109},
                        {  0,  1,  3,  5,  1, 15, 19, 113, 115, 411,  157, 1725, 3463, 2817,  9997,  7451, 12055},
                        {  0,  1,  1,  7,  3, 29, 51,  47,  97, 233,   39, 2021, 2909, 5459,  2615, 13329, 35887},
                        {  0,  1,  3,  7,  7, 21, 61,  55,  19,  59,  761, 1905, 3379, 8119, 13207,  8965,  9997},
                        {  0,  1,  1,  1,  9, 23, 37,  97,  97, 353,  169,  375, 1349, 5121, 13313, 19457,  1033},
                        {  0,  1,  3,  3,  5, 19, 33,   3, 197, 329,  983,  893, 3739, 7669,  2671, 18391, 31161},
                        {  0,  1,  1,  3, 13, 11,  7,  37, 101, 463,  657, 1599,  347, 2481,  5201,  3123, 32253},
                        {  0,  1,  1,  7, 13, 25,  5,  83, 255, 385,  647,  415,  387, 7101, 11469, 11699, 15865},
                        {  0,  1,  3,  5, 11,  7, 11, 103,  29, 111,  581,  605, 2381, 2677, 14855,   721, 26903},
                        {  0,  1,  1,  1,  3, 13, 39,  27, 203, 475,  505,  819, 2821, 1405, 12165,   709, 41543},
                        {  0,  1,  3,  1, 15, 17, 63,  13,  65, 451,  833,  975, 1873, 7423,  5837, 20481, 12291},
                        {  0,  1,  1,  5,  5,  1, 27,  33, 195, 263,  139,  915, 1959,  725,  5387, 19285,  5165},
                        {  0,  1,  3,  3,  3, 25, 17, 115, 117,  19,  147, 1715, 1929, 2465, 12483, 13057, 28931},
                        {  0,  1,  1,  3, 15, 29, 15,  41, 105, 249,  203, 1223, 2389,  471, 12945, 32321, 29377},
                        {  0,  1,  3,  1,  7,  3, 23,  79,  17, 275,   81, 1367, 3251, 2887,  1279,  4865, 64771},
                        {  0,  1,  3,  7,  9, 31, 29,  17,  47, 369,  337,  663, 1149, 1715,   187, 12285, 53631},
                        {  0,  1,  1,  5, 13, 11,  3,  29, 169, 393,  829,  629,  243, 5595,  8133,  4929, 10817},
                        {  0,  1,  3,  1,  9,  5, 21, 119, 109, 167,  989,  525, 3609, 5689, 11819, 15889, 48083},
                        {  0,  1,  1,  3,  1, 23, 13,  75, 149, 333,  375,  469, 1131,  441, 14471, 12625,  8881},
                        {  0,  1,  3,  3, 11, 27, 31,  73,  15, 473,  365,  981, 1701, 3169,  7615,  8405, 41135},
                        {  0,  1,  1,  7,  7, 19, 25, 105, 213, 469,  131, 1667,  143, 4485,  2981, 12593, 60913},
                        {  0,  1,  3,  5,  5, 21,  9,   7, 135, 101,  215, 1587, 1339, 6311,  4081, 28637, 60935},
                        {  0,  1,  1,  1, 15,  5, 49,  59, 253,  21,  733, 1251, 3497, 3557,  7223, 13425, 58577},
                        {  0,  1,  1,  1,  1,  1, 33,  65, 191, 451,  451,  451, 2499,  483, 11843, 28285, 12029},
                        {  0,  1,  3,  5, 15, 17, 19,  21, 155, 229,  447,  481, 1571, 3781, 10799, 15893,   959},
                        {  0,  1,  1,  7, 11, 13, 29,   3, 175, 247,  177,  721,  983, 3195,  9277, 15405, 19637},
                        {  0,  1,  3,  7,  5,  7, 11, 113,  63, 297,   57,  483, 4021, 5213,  2031,  4677, 26607},
                        {  0,  1,  1,  5,  3, 15, 19,  61,  47, 403,  471, 1209, 1625, 5085, 15371, 19493, 56445},
                        {  0,  1,  3,  1,  1,  9, 27,  89,   7, 497,  979, 1457, 3217,  185,  6603,  1129, 36087},
                        {  0,  1,  1,  3,  7, 31, 15,  45,  23,  61,  197,  415, 1163, 7323,  7563, 25321, 52563},
                        {  0,  1,  3,  3,  9,  9, 25, 107,  39, 361,  251, 1435, 2977, 1713, 11617, 14979, 5455}};

        /// <summary>
        /// Метод для получения случайного значения 
        /// с помощью LPTau-последовательности
        /// </summary>
        /// <param name="experimentNumber">Номер эксперимента (начиная с 1)</param>
        /// <param name="parameterNumber">Номер параметра (начиная с 1)</param>
        /// <returns>Случайное значение оптимизируемого параметра</returns>
        public static double GetParameterValue(int experimentNumber, int parameterNumber)
        {
            int m = 1 + Convert.ToInt32(Math.Truncate(Math.Log(experimentNumber, Math.E) / Ln2));
            double s = 0.0;
            int ns;
            double a1, a2;
            for (int k = 1; k <= m; k++)
            {
                ns = 0;
                for (int l = k; l <= m; l++)
                {
                    a1 = 2 * Fraction(experimentNumber / dd(l));
                    a2 = 2 * Fraction(nr1[parameterNumber, l] / dd(l + 1 - k));
                    ns += Convert.ToInt32(Math.Truncate(a1)) * Convert.ToInt32(Math.Truncate(a2));
                }

                s += Fraction(0.5 * ns) / dd(k - 1);
            }

            return s;
        }

        private static double dd(int st)
        {
            return Math.Exp(st * Ln2);
        }

        private static double Fraction(double x)
        {
            return (x - Math.Truncate(x));
        }
    }
}